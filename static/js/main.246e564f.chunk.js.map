{"version":3,"sources":["../../src/index.tsx","App.tsx","index.tsx"],"names":["Avatar","children","letter1","letter2","str1","str2","avatarClasses","styleMod","style","components","bgColor","r","g","b","R","parseInt","G","B","idealTextColor","size","onClick","className","initialsMod","imageSrc","name","str","res","getInitialsFromWords","getInitialsFromString","containerClasses","avatar","title","borderSize","borderStyleMod","borderStyle","borderClasses","borderClassName","containerStyle","App","width","href","marginTop","colour","initials","borderColour","window","alert","height","position","zIndex","background","border","borderRadius","textAlign","right","bottom","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.246e564f.chunk.js","sourcesContent":["import * as React from 'react'\nimport './style.css'\n\ninterface Props {\n  name?: string\n  initials?: string\n  colour?: string\n  imageSrc?: string\n  style?: React.CSSProperties | undefined\n  className?: string\n  size?: number | undefined\n  borderSize?: number | undefined\n  borderColour?: string\n  borderStyle?: React.CSSProperties | undefined\n  borderClassName?: string\n  containerStyle?: React.CSSProperties | undefined\n  containerClassName?: string\n  onClick?: () => void\n  children?: any\n}\n\nexport const Avatar = ({\n  imageSrc,\n  initials,\n  colour,\n  name,\n  style,\n  className,\n  size,\n  borderSize,\n  borderColour,\n  borderStyle,\n  borderClassName,\n  containerStyle,\n  containerClassName,\n  onClick,\n  children\n}: Props) => {\n  function idealTextColor(bgColor?: string) {\n    var nThreshold = 105\n    let components = null\n    if (bgColor != null) {\n      var r = bgColor.substring(1, 3)\n      var g = bgColor.substring(3, 5)\n      var b = bgColor.substring(5, 7)\n      components = {\n        R: parseInt(r, 16),\n        G: parseInt(g, 16),\n        B: parseInt(b, 16)\n      }\n    } else {\n      components = {\n        R: 255,\n        G: 255,\n        B: 255\n      }\n    }\n    var bgDelta =\n      components.R * 0.299 + components.G * 0.587 + components.B * 0.114\n    return 255 - bgDelta < nThreshold ? '#000' : '#fff'\n  }\n  function getInitialsFromString(str: string) {\n    if (str == null) {\n      return ''\n    }\n    var res = str.split(' ')\n    if (res.length > 1) {\n      return getInitialsFromWords(res[0], res[1])\n    } else if (res.length > 0) {\n      return getInitialsFromWords(res[0], '')\n    }\n    return ''\n  }\n  function getInitialsFromWords(str1: string, str2: string) {\n    var letter1 = ''\n    var letter2 = ''\n    if (str1 != null && str1 !== '') {\n      letter1 = str1[0]\n    }\n    if (str2 != null && str2 !== '') {\n      letter2 = str2[0]\n    }\n    return letter1 + letter2\n  }\n\n  let avatarClasses = 'avatar'\n  const styleMod: React.CSSProperties = { ...style }\n  if (colour) {\n    styleMod.backgroundColor = colour\n    styleMod.color = idealTextColor(colour)\n  }\n  if (size != null) {\n    styleMod.height = size + 'px'\n    styleMod.width = size + 'px'\n    styleMod.fontSize = size / 2 + 'px'\n    styleMod.lineHeight = size - 1 + 'px'\n    styleMod.backgroundSize = size + 'px'\n  }\n  if (onClick != null) {\n    avatarClasses += ' hoverable'\n  }\n  if (className != null) {\n    avatarClasses += ' ' + className\n  }\n\n  let initialsMod = null\n  if (imageSrc != null && imageSrc !== '') {\n    styleMod.backgroundImage = 'url(' + imageSrc + ')'\n  } else {\n    if (initials) {\n      initialsMod = initials\n    } else if (name) {\n      initialsMod = getInitialsFromString(name)\n    }\n  }\n\n  let containerClasses = 'react-profile-avatar'\n  if (containerClassName) {\n    containerClasses += ' ' + containerClassName\n  }\n\n  const avatar = (\n    <div\n      className={avatarClasses}\n      style={styleMod}\n      title={name}\n      onClick={onClick}\n    >\n      {initialsMod}\n    </div>\n  )\n\n  if (borderSize != null && borderSize > 0) {\n    const borderStyleMod: React.CSSProperties = { ...borderStyle }\n    borderStyleMod.borderWidth = borderSize\n    if (borderColour) {\n      borderStyleMod.borderColor = borderColour\n    }\n    if (size != null) {\n      borderStyleMod.height = size + borderSize * 2 + 2 + 'px'\n      borderStyleMod.width = size + borderSize * 2 + 2 + 'px'\n    }\n\n    let borderClasses = 'avatar-border'\n    if (borderClassName != null) {\n      borderClasses += ' ' + borderClassName\n    }\n\n    return (\n      <div className={containerClasses} style={containerStyle}>\n        <div className={borderClasses} style={borderStyleMod}>\n          {avatar}\n          {children}\n        </div>\n      </div>\n    )\n  } else {\n    return (\n      <div className={containerClasses} style={containerStyle}>\n        {avatar}\n        {children}\n      </div>\n    )\n  }\n}\n","import React from 'react'\n\nimport 'bootstrap/dist/css/bootstrap.css'\n\nimport { Avatar } from 'react-profile-avatar'\nimport 'react-profile-avatar/dist/index.css'\n\nconst App = () => {\n\n  return (\n    <div>\n      <nav className='navbar navbar-expand-lg navbar-dark bg-primary fixed-top'>\n          <div style={{width:'100%'}}>\n              <ul className='navbar-nav ml-lg-5'>\n                  <li className='nav-item mr-lg-3'>\n                      <a className={'nav-link active'} href='.'>Examples</a>\n                  </li>\n                  <li className='nav-item mr-lg-3'>\n                      <a className={'nav-link'} href='http://github.com/darylbuckle/react-profile-avatar'>Documentation</a>\n                  </li>\n              </ul>\n          </div>\n      </nav>\n\n      <div className='container' style={{marginTop:'100px'}}>\n        <h1 className='mb-5'>react-profile-avatar examples</h1>\n\n        <div className='mt-3 mb-5'>\n          <h2 className='mb-4'>Minimal</h2>\n          <div className='row'>\n            <div className='col-md-6'>\n              <p>\n                Parse just the \"name\" prop to get a basic avatar;\n              </p>\n              <pre>\n                {'name=\\'John Doe\\''}\n              </pre>\n            </div>\n            <div className='col-md-6'>\n              <Avatar \n                name={'John Doe'}\n              />\n            </div>\n          </div>\n        </div>\n\n        <div className='mt-3 mb-5'>\n          <h2 className='mb-4'>Specify Colour</h2>\n          <div className='row'>\n            <div className='col-md-6'>\n              <p>\n                Parse the \"colour\" prop to change the background colour.\n                This should be in hex format including the #. E.g #FF0000.\n              </p>\n              <pre>\n                {'name=\\'John Doe\\''}\n                <br />\n                {'colour=\\'#FF0000\\''}\n              </pre>\n            </div>\n            <div className='col-md-6'>\n              <Avatar \n                name={'John Doe'}\n                colour={'#FF0000'}\n              />\n            </div>\n          </div>\n        </div>\n\n        <div className='mt-3 mb-5'>\n          <h2 className='mb-4'>Override Initials</h2>\n          <div className='row'>\n            <div className='col-md-6'>\n              <p>\n                Parse the \"initials\" prop to alter the initials in the Avatar.\n              </p>\n              <pre>\n                {'name=\\'John Doe\\''}\n                <br />\n                {'initials=\\'123\\''}\n                <br />\n                {'colour=\\'#FF0000\\''}\n              </pre>\n            </div>\n            <div className='col-md-6'>\n              <Avatar \n                name={'John Doe'}\n                initials={'123'}\n                colour={'#FF0000'}\n              />\n            </div>\n          </div>\n        </div>\n\n        <div className='mt-3 mb-5'>\n          <h2 className='mb-4'>Use an Image</h2>\n          <div className='row'>\n            <div className='col-md-6'>\n              <p>\n                Set \"imageSrc\" equal to the url of an image to show the image instead of initials.\n                This can also be a base64 string.\n              </p>\n              <pre>\n                {'name=\\'John Doe\\''}\n                <br />\n                {'imageSrc=\\'https://darylbuckle.dev/angular-dev-portfolio/assets/images/profile.png\\''}\n              </pre>\n            </div>\n            <div className='col-md-6'>\n              <Avatar \n                name={'John Doe'}\n                imageSrc={'https://darylbuckle.dev/angular-dev-portfolio/assets/images/profile.png'}\n              />\n            </div>\n          </div>\n        </div>\n\n        <div className='mt-3 mb-5'>\n          <h2 className='mb-4'>Re-size the Avatar</h2>\n          <div className='row'>\n            <div className='col-md-6'>\n              <p>\n                Set \"size\" equal to a number to change the size of the Avatar.\n                This expects the size in pixels.\n              </p>\n              <pre>\n                {'name=\\'John Doe\\''}\n                <br />\n                {'imageSrc=\\'https://darylbuckle.dev/angular-dev-portfolio/assets/images/profile.png\\''}\n                <br />\n                {'size=100'}\n              </pre>\n            </div>\n            <div className='col-md-6'>\n              <Avatar \n                name={'John Doe'}\n                imageSrc={'https://darylbuckle.dev/angular-dev-portfolio/assets/images/profile.png'}\n                size={100}\n              />\n            </div>\n          </div>\n        </div>\n\n        <div className='mt-3 mb-5'>\n          <h2 className='mb-4'>Add a Border</h2>\n          <div className='row'>\n            <div className='col-md-6'>\n              <p>\n                Set \"borderSize\" equal to a number greater than 0 to add a border.\n                Set \"borderColour\" to a hex colour to change the colour.\n              </p>\n              <pre>\n                {'name=\\'John Doe\\''}\n                <br />\n                {'imageSrc=\\'https://darylbuckle.dev/angular-dev-portfolio/assets/images/profile.png\\''}\n                <br />\n                {'size=100'}\n                <br />\n                {'borderSize=5'}\n                <br />\n                {'borderColour=\\'#ffa500\\''}\n              </pre>\n            </div>\n            <div className='col-md-6'>\n              <Avatar \n                name={'John Doe'}\n                imageSrc={'https://darylbuckle.dev/angular-dev-portfolio/assets/images/profile.png'}\n                size={100}\n                borderSize={5}\n                borderColour={'#ffa500'}\n              />\n            </div>\n          </div>\n        </div>\n\n        <div className='mt-3 mb-5'>\n          <h2 className='mb-4'>On Click</h2>\n          <div className='row'>\n            <div className='col-md-6'>\n              <p>\n                Set \"onClick\" equal to a function to allow selecting to fire an event.\n              </p>\n              <pre>\n                {'name=\\'John Doe\\''}\n                <br />\n                {'imageSrc=\\'https://darylbuckle.dev/angular-dev-portfolio/assets/images/profile.png\\''}\n                <br />\n                {'size=100'}\n                <br />\n                {'onClick=() => window.alert(\\'You clicked on the avatar\\')'}\n              </pre>\n            </div>\n            <div className='col-md-6'>\n              <Avatar \n                name={'John Doe'}\n                imageSrc={'https://darylbuckle.dev/angular-dev-portfolio/assets/images/profile.png'}\n                size={100}\n                onClick={() => window.alert('You clicked on the avatar')}\n              />\n            </div>\n          </div>\n        </div>\n\n        <div className='mt-3 mb-5'>\n          <h2 className='mb-4'>Children</h2>\n          <div className='row'>\n            <div className='col-md-6'>\n              <p>\n                Parse child JSX elements to render additional components within the avatar.\n                E.g this examples adds an online icon.\n              </p>\n            </div>\n            <div className='col-md-6'>\n              <Avatar \n                name={'John Doe'}\n                imageSrc={'https://darylbuckle.dev/angular-dev-portfolio/assets/images/profile.png'}\n                size={100}\n              >\n                <div style={{\n                  width: '20px',\n                  height: '20px',\n                  position: 'absolute',\n                  zIndex: 1,\n                  background: '#3CBC3C',\n                  border: '2px solid white',\n                  borderRadius: '50%',\n                  textAlign: 'center',\n                  right: '5px',\n                  bottom: '5px'\n                }} />\n              </Avatar>\n            </div>\n          </div>\n        </div>\n\n        <div className='mt-3 mb-5'>\n          <h2 className='mb-4'>CSS Customization</h2>\n          <div className='row'>\n            <div className='col-md-6'>\n              <p>\n                Use the below style and className props to alter the style of each element in the avatar.\n              </p>\n              <pre>\n                {'style={borderRadius: \\'0px\\'}'}\n                <br />\n                {'className=\\'mycustomclass\\''}\n                <br />\n                {'borderStyle={}'}\n                <br />\n                {'borderClassName=\\'\\''}\n                <br />\n                {'containerStyle={}'}\n                <br />\n                {'containerClassName=\\'\\''}\n                <br />\n              </pre>\n            </div>\n            <div className='col-md-6'>\n              <Avatar \n                name={'John Doe'}\n                imageSrc={'https://darylbuckle.dev/angular-dev-portfolio/assets/images/profile.png'}\n                size={100}\n                style={{borderRadius: '0px'}}\n                className={'mycustomclass'}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}